import * as fs from 'fs';
import * as path from 'path';
import * as process from 'process';

import { getDistance, isPointInPolygon } from 'geolib';

import { groupBy } from './groupBy';

import { Coordinate, GeoItem } from './types';
import { clusterTreesWithoutOverlappingOtherClusters } from './clusterCoordinates';
import { toWKT } from './outputFormatters';

// const v8 = require('node:v8');
// const { heap_size_limit } = v8.getHeapStatistics();
// const heapSizeInGB = heap_size_limit / (1024 * 1024 * 1024);
// console.log(`${heapSizeInGB} GB`);


const args = process.argv.slice(2);
if (args.length === 0) {
    console.error('Please provide a path to a JSON file.');
    process.exit(1);
}
const filePath = path.resolve(args[0]);
const rawData = fs.readFileSync(filePath, 'utf-8');

const data: GeoItem[] = JSON.parse(rawData);
const maxDistanceToOtherTreesInMeters = 100;//crossings/roads in NL seem to be 30m spacing of trees


function toGeoItem(i: string, title: string): GeoItem {
    const parts = i.split(' ');
    return {
        title: title,
        body: '',
        Pollenwaarde: undefined,
        Nectarwaarde: undefined,
        EindeBloei: undefined,
        StartBloei: undefined,
        latitude: parseFloat(parts[0]), 
        longitude: parseFloat(parts[1])
    };
}

const debugging = false;
if(debugging) {
    // 2 polygons which are overlapping AND have some trees inside the polygon as well, wtf?
    const debugPolygon = ["52.044470191913334 4.376030268216351","52.04449627672676 4.375927637149666","52.04453134840226 4.375824802972036","52.04456641998735 4.375721968633721","52.04460149148201 4.375619134134723","52.04462757593516 4.375516502529451","52.04442613310451 4.376133305022877","52.044545942105216 4.37543088231591","52.0445108707747 4.375533716833358","52.044475799353776 4.375636551190122","52.04444072784243 4.375739385386204","52.04440565624067 4.375842219421603","52.044370584548496 4.37594505329632","52.04433551276591 4.376047887010353","52.04462457046094 4.375166711122008","52.044659641468904 4.3750638760575","52.044694712386445 4.374961040832309","52.04472978321357 4.374858205446436","52.04476485395027 4.374755369899881","52.04479992459656 4.374652534192643","52.04488143368296 4.374723578742718","52.04485534992466 4.3748262113881715","52.04482040440538 4.374943621791745","52.044785333504514 4.375046457319859","52.04475026251323 4.375149292687288","52.044715191431536 4.375252127894035","52.044852342395444 4.374476418261688","52.044887412796555 4.374373582136185","52.04492248310724 4.374270745849998","52.044957553327514 4.37416790940313","52.04499262345737 4.37406507279558","52.045018706549726 4.373962439396005","52.045053776499024 4.37385960248794","52.04508884635789 4.373756765419194","52.04512391612634 4.373653928189766","52.04517934292463 4.373827605392995","52.04514427300477 4.373930442615032","52.04521441275406 4.373724768010274","52.0451181899416 4.374033076321414","52.04508311984119 4.374135913242935","52.04504804965035 4.374238750003775","52.0450129793691 4.374341586603931","52.044977908997424 4.374444423043403","52.044942838535334 4.374547259322194","52.04525520735083 4.37324278117975","52.04529040216769 4.373154518017964","52.04531648446204 4.373051883409529","52.045351553610864 4.37294904510807","52.045386748205935 4.3728607815264215","52.04541283024285 4.372758146527363","52.0454480246938 4.372669882675492","52.045474106563425 4.372567247425643","52.045509175286206 4.372464408384559","52.04554436951535 4.372376144112824","52.04557045112754 4.372273508472355","52.045605645212554 4.372185243930398","52.04563172665745 4.372082608039139","52.045577051180274 4.371996380897216","52.04551326304389 4.371895782831131","52.04545858743011 4.371809556145478","52.04539492481179 4.371723533490698","52.04534024907204 4.371637307243198","52.045276586327965 4.371551285060441","52.04516522279853 4.371145636805863","52.04515076914875 4.371554139008781","52.04510658859158 4.371642606979161"]
        .concat(["52.04713537431211 4.3713341799019965","52.04711840618679 4.3714511912291645","52.047071837092055 4.37126273014329","52.04712475278166 4.371144903081937","52.04719130733214 4.371566163848167","52.04720092273593 4.371638837317776","52.04679933658341 4.3709336150898075","52.04675364721008 4.3708471831137095","52.04665353294737 4.370703674299332","52.04657126656196 4.370545182747276","52.046489125805735 4.370401267008492","52.04636356036411 4.37043327466851","52.04631152608997 4.370653126768739","52.04637481207629 4.370695424064998","52.04635784457912 4.370812433640023","52.046420501561336 4.370781855156718","52.046403659757175 4.370913440023523","52.04648441642232 4.370897028889422","52.046476687191 4.371042985164323","52.04654858269834 4.371041353455155","52.04660376185932 4.371185882370579","52.04614442197609 4.371079681981859","52.04609012306372 4.371037180394792","52.046181375730114 4.371195467227378","52.0459711546473 4.370792055806369","52.04596116131284 4.370675659337674","52.04588015305982 4.370662920606141","52.04510155969629 4.3710596156593144","52.0450306701804 4.371177845335116","52.04497599404161 4.3710916204552674","52.04509433319705 4.3712638665148695","52.044912330899216 4.371005599747527","52.04485752885794 4.3709048006046665","52.044793865579216 4.370818780389974","52.0448647547373 4.370700550776055","52.04492841810162 4.370786570957539","52.04498309446297 4.370872795372076","52.04468451271346 4.37064633262964","52.044620849246066 4.370560313114512","52.0445661726557 4.370474089777769","52.044502383220596 4.370373496151044","52.04443871955406 4.3702874773734","52.044384042764186 4.370201254720456","52.04432037897191 4.370115236414809","52.044509608182786 4.3701692478636485","52.04445493130695 4.370083025219766","52.04457327193492 4.370255266608079","52.04462794868479 4.370341489690093","52.04469173814663 4.37044208355192","52.04474641475992 4.370528307090181","52.0443911415388 4.369982432401379","52.04433659042729 4.369910784741579","52.044227236234576 4.3697383409617885","52.044172559043666 4.36965211938775","52.044108894851306 4.369566102269968","52.04405421753443 4.369479881134051","52.044038006823556 4.369684331667968","52.04398332959264 4.369598110522984","52.044101670930324 4.369770348818967","52.044156473940944 4.369871144871137","52.0438832137959 4.36945461334933","52.043819423491065 4.369354022708898","52.043764746018624 4.36926780238807","52.043701081545045 4.369181786598208","52.04364640394665 4.369095566715492","52.04358273934735 4.369009551397607","52.043890311189664 4.3692357933698105","52.04383563363127 4.369149573058053","52.04395397562311 4.369321809598431","52.0437719690721 4.369063557301413","52.04371716537183 4.368962763104938","52.04365350067634 4.368876747841314","52.043391367036364 4.368707784262698","52.043327702154045 4.36862176998564","52.04327302414617 4.368535551505543","52.04321834607525 4.368449333236008","52.043163794030974 4.368377689317499","52.04345314109024 4.368575185242237","52.04339858912311 4.368503540796123","52.045062282290964 4.371716500004316","52.0450179759433 4.371790392883236","52.04497379520644 4.37187886035839","52.044929488755486 4.371952752930683","52.04487632095223 4.372041423824406","52.044832014397755 4.37211531607498","52.04478783341372 4.372203782862448","52.044743526755965 4.3722776748064005","52.044699345648475 4.372366141259034","52.04465503888743 4.372440032896367","52.044610732079335 4.372513924387465","52.04455756384751 4.372602593983755"])
    const treesInPolygon = ["52.04495173362473 4.372447886405346"].concat(["52.04494902375015 4.373176826919913"]);


    // const debugPolygon = ["52.0273267472761 4.37307969465699","52.0273061947089 4.37287882148708","52.0271903852604 4.37293747232614","52.0270104347336 4.37377949240016","52.0277038217237 4.37380001552899","52.028653604916 4.37428690877909","52.0281714506803 4.37327306014986","52.0281265361635 4.37317207242521"]
    // const treesInPolygon = ["52.0274250925171 4.37351597825935","52.027386847326 4.3733376686683"]
    function debugOutput(polygonPointsToCheck: Array<string>, coordinatesWhichShouldNotBeInPolygon: Array<string>) {

        const debugPolygon = polygonPointsToCheck.map<GeoItem>(i => toGeoItem(i, 'WrongPolygonTreeType'));
        const treesInPolygon = coordinatesWhichShouldNotBeInPolygon.map<GeoItem>(i => toGeoItem(i, 'OtherTreeType'));

        const result = groupTreesByKindAndCluster(debugPolygon.concat(treesInPolygon), maxDistanceToOtherTreesInMeters);
        console.log('FINAL WKT OUTPUT: ');
        console.log(`GEOMETRYCOLLECTION (${toOutputObjectArray(result).map(i => i.WKT).join(', ')})`);
    }
    debugOutput(debugPolygon, treesInPolygon);
}
else {

    // const polygon = ["52.0316732790945 4.378476003826965","52.029343030347384 4.378222454849103","52.029601254156375 4.381087435514089","52.03082445790613 4.388565036426451","52.0308701343517 4.3886514559337435","52.033950270209736 4.391483007952142","52.03403127644325 4.39149578111398","52.03467550591685 4.391146252705188","52.03480895489424 4.390982968259946","52.0347933288733 4.387019121297067","52.034567171441275 4.381573428250642","52.033908537762684 4.379183510341133","52.03318708460872 4.378908271788824"]
    //     .map(i => toGeoItem(i, 'schietwilg (Salix alba)'));
    // const tocheck = toGeoItem("52.03147226092894 4.382298703941558", 'peer (Pyrus communis)');

    // const insidePolygon = isPointInPolygon(tocheck,polygon);
    // if(!insidePolygon) throw new Error('should be inside polygon!');
    // console.log('done');


    // // we only want to debug the trees which currently are comprised in one polygon which is wrong
    // const coordinatesToTest = ["52.03083944055885 4.3818757113916185","52.03080287055943 4.381803667340746","52.03020683674369 4.382531110498444","52.03015192015624 4.382415760201607","52.029601254156375 4.381087435514089","52.0302704207987 4.380504067004907","52.03028889305777 4.380561943049007","52.030334824473144 4.380677493346504","52.03023347619542 4.380388315060349","52.030178059077635 4.38021468750262","52.030122766337996 4.380055630315562","52.03007670966605 4.379925511281153","52.029581310352384 4.378756272885603","52.02963635529254 4.37888618698356","52.02951727829035 4.378626561448593","52.02948033184595 4.378510813007402","52.029389213738575 4.378367139688224","52.029343030347384 4.378222454849103","52.02971873530324 4.379059204022942","52.02980136452528 4.379261361364004","52.02984729721383 4.3793769090647325","52.02992980119935 4.3795644976989685","52.02996649724895 4.37965110840022","52.03146561080709 4.385738121543942","52.03152913938273 4.385809567151308","52.031566078668554 4.385925326944944","52.031804199995854 4.386444642102223","52.03178721669812 4.386561607708805","52.03052821655546 4.383325410233198","52.03245638316986 4.388091448454075","52.03248420959493 4.388192842235141","52.03255660006075 4.388249521763273","52.032548725576795 4.388380859018844","52.03335551154299 4.390242885174283","52.03385892140955 4.391310151465663","52.0339045958413 4.391396579620701","52.033950270209736 4.391483007952142","52.03403127644325 4.39149578111398","52.03411142010041 4.3914065553707475","52.03431627243977 4.39118338968846","52.034369578122906 4.391109333781458","52.03467550591685 4.391146252705188","52.03480895489424 4.390982968259946","52.03083270339184 4.388477414863136","52.03082445790613 4.388565036426451","52.0308701343517 4.3886514559337435","52.0316732790945 4.378476003826965","52.032732990218626 4.379413995970452","52.032863795029556 4.379993998307097","52.03318708460872 4.378908271788824","52.033908537762684 4.379183510341133","52.03287737035627 4.381582219464612","52.034175476972514 4.3820194443750715","52.03422003868535 4.3819747220961025","52.03426460038066 4.381929999727948","52.034389173960484 4.381781462488191","52.03444259813031 4.38172196666103","52.0344870352904 4.3816626724528565","52.03453159686388 4.3816179495065715","52.034567171441275 4.381573428250642","52.03344496811247 4.383842991661469","52.03348178517662 4.383944183714439","52.03353670026591 4.3840595444441375","52.033591615242436 4.384174905457054","52.033655889418576 4.384333778837655","52.03371105230725 4.3844782827406785","52.033765966874505 4.384593644717487","52.033811770281716 4.384694636966717","52.03385769765074 4.38481020059475","52.03389451388573 4.3849113943787446","52.033850199101714 4.384985255756168","52.03395853903651 4.385041127483179","52.03399535507353 4.385142321685652","52.034041282004246 4.385257886248219","52.03410530677418 4.385387620274331","52.03424308650642 4.385734316282899","52.03427977802748 4.3858209403876165","52.03432558038457 4.38592193505431","52.03438061743578 4.386051871735335","52.03442641959526 4.386152866866259","52.034481580256944 4.386297375504842","52.03451827136478 4.386384000533662","52.03457330790734 4.386513938343461","52.034628344306846 4.3866438764731415","52.03467426976744 4.3867594442145705","52.03472930589669 4.386889382939891","52.0347933288733 4.387019121297067"]
    // const toFilter = coordinatesToTest.map<GeoItem>(i => toGeoItem(i, 'schietwilg (Salix alba)'));
    // const data2 = data.filter(i => i.title != 'schietwilg (Salix alba)' || toFilter.some(f => f.latitude === i.latitude && f.longitude === i.longitude));
    // const result = groupTreesByKindAndCluster(data, maxDistanceToOtherTreesInMeters);
    // console.log('FINAL WKT OUTPUT: ');
    // console.log(`GEOMETRYCOLLECTION (${toOutputObjectArray(result).map(i => i.WKT).join(', ')})`);

    // // FINAL VERSION HERE:
    const result = groupTreesByKindAndCluster(data, maxDistanceToOtherTreesInMeters);
    console.log(JSON.stringify(toOutputObjectArray(result), undefined, '  '));
}

interface outputType {
    title: string;
    body: string;
    Pollenwaarde: number;
    Nectarwaarde: number;
    AantalBomen: number;
    StartBloei: number;
    EindeBloei: number;
    WKT: string;
    DebugInfo: string;
}

type clusteredTreesPerKind = Array<{ treeKind: GeoItem, clusters: GeoItem[][]}>;

function toOutputObjectArray(clusteredTrees: clusteredTreesPerKind): outputType[] {
    return clusteredTrees.reduce((acc, currentTreeKindClusters) => {
        const clusters = currentTreeKindClusters.clusters;
        const treeKind = currentTreeKindClusters.treeKind;

        const metadata = {
            title: treeKind.title,
            body: treeKind.body,
            Pollenwaarde: treeKind.Pollenwaarde,
            Nectarwaarde: treeKind.Nectarwaarde,
            StartBloei: treeKind.StartBloei,
            EindeBloei: treeKind.EindeBloei,
        };

        clusters.forEach(cluster => {
            const clustersSerialized2WKT = toWKT(cluster);
            acc.push({
                ...metadata,
                WKT: clustersSerialized2WKT,
                AantalBomen: cluster.length,
                DebugInfo: JSON.stringify(cluster.map(i => `${i.latitude} ${i.longitude}`))
            });
        });
        return acc;
    }, new Array<outputType>());
}

function groupTreesByKindAndCluster(items: GeoItem[], maxDistanceToOtherTreesInMeters: number): Array<{ treeKind: GeoItem, clusters: GeoItem[][]}> {
    // group all GeoItems based on SoortNaam
    const groupedData = groupBy(items, (i => i.title));

    const result = groupedData
//.filter(group => group.key === "schietwilg (Salix alba)")
    .map((groupedTrees) => {
        const soort = groupedTrees.key;
        const clustersOfTreeKind = clusterTreesWithoutOverlappingOtherClusters(groupedTrees.items, items, maxDistanceToOtherTreesInMeters);

        return {
            treeKind: items.find(i => i.title === soort) || {} as GeoItem, // cheats to fix the nullref typescript assumption
            clusters: clustersOfTreeKind
        }
    });

    // TODO OPTIMIZE - now that we have created clusters - identify which are overlapping and break one of those into smaller clusters untill we have no more clusters that overlap


    return result;
}

